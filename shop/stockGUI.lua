---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Kevin.
--- DateTime: 22.12.2019 18:01
---


local GUI     = require("GUI")
local unicode = require("unicode")
local config  = require("shop.config_stock")
require("gui_extensions")

---------------------------------------------------------------------------------
local gui                          = {}
gui.on_alert                       = false

local workspace                    = GUI.workspace()

local panel                        = workspace:addChild(GUI.panel(1, 1, workspace.width, workspace.height, 0x2D2D2D))
local menu                         = workspace:addChild(GUI.menu(1, 1, workspace.width, 0xEEEEEE, 0x666666, 0x3366CC, 0xFFFFFF))
local label_uptime                 = workspace:addChild(GUI.label(140, 2, 20, 1, 0x33DB40, "Uptime: 0"))
local label_ram                    = workspace:addChild(GUI.label(120, 2, 20, 1, 0x33DB40, "RAM free: 0"))
local label_current_export         = workspace:addChild(GUI.label(1, 2, 20, 1, 0x33DB40, "Current export:"))
local textBox_scheduled            = workspace:addChild(GUI.textBox(1, 5, workspace.width / 2, workspace.height / 2, 0xF0F0F0, 0x2D2D2D, {}, 1, 1, 0))
textBox_scheduled.scrollBarEnabled = true
local textBox_errors               = workspace:addChild(GUI.textBox(2, workspace.height / 2 + 7, workspace.width - 2, workspace.height / 2 - 7, 0xF0F0F0, 0x2D2D2D, {}, 1, 1, 0))
textBox_errors.scrollBarEnabled    = true
local textBox_crafting             = workspace:addChild(GUI.textBox(workspace.width / 2 + 2, 5, workspace.width / 2 - 1, workspace.height / 2, 0xF0F0F0, 0x2D2D2D, {}, 1, 1, 0))
textBox_crafting.scrollBarEnabled  = true
local label_scheduled              = workspace:addChild(GUI.label(textBox_scheduled.x, textBox_scheduled.y - 1, 20, 1, 0x33DB40, "Scheduled items:"))
local label_errors                 = workspace:addChild(GUI.label(textBox_errors.x, textBox_errors.y - 1, 20, 1, 0x33DB40, "Errors:"))
local label_crafting               = workspace:addChild(GUI.label(textBox_crafting.x, textBox_crafting.y - 1, 20, 1, 0x33DB40, "Crafting:"))
local textBox_logs                 = workspace:addChild(GUI.textBox(1, 2, workspace.width, workspace.height, 0xF0F0F0, 0x2D2D2D, {}, 1, 1, 0))
textBox_logs.hidden                = true
textBox_logs.scrollBarEnabled      = true

-- gui module
gui.workspace                      = workspace
gui.panel                          = panel
gui.menu                           = menu
gui.label_uptime                   = label_uptime
gui.label_ram                      = label_ram
gui.textBox_logs                   = textBox_logs
gui.label_current_export           = label_current_export
gui.textBox_scheduled              = textBox_scheduled
gui.textBox_errors                 = textBox_errors
gui.textBox_crafting               = textBox_crafting

---------------------------------------------------------------------------------

label_current_export.setValue      = function(val, draw)
    label_current_export.text = "Current export: " .. tostring(val)
    if draw ~= false then
        workspace:draw()
    end
end

------------------------

--- Item selection
function gui.updateTree(tree, values, items, compare)
    if compare == nil then
        compare = function(a, b) return unicode.lower(tostring(a)) < unicode.lower(tostring(b)) end
    end
    local function updateRecursively(t, definitionName, offset)
        local list = {}
        for key in pairs(t) do
            table.insert(list, key)
        end
        
        local i, expandables = 1, {}
        while i <= #list do
            if type(t[list[i]]) == "table" then
                table.insert(expandables, list[i])
                table.remove(list, i)
            else
                i = i + 1
            end
        end
        
        table.sort(expandables, compare)
        table.sort(list, compare)
        
        for i = 1, #expandables do
            local definition = definitionName .. expandables[i] .. "."
            
            tree:addItem(
                    tostring(expandables[i]),
                    expandables[i],
                    offset,
                    true
            )
            
            --if tree.expandedItems[definition] then
            if tree.expandedItems[expandables[i]] then
                --updateRecursively(t[expandables[i]], definition, offset + 2)
                updateRecursively(t[expandables[i]], "", offset + 2)
            end
        end
        --print("#list", #list)
        --json = require("json")
        --print(json.encode(list))
        for i = 1, #list do
            local val        = definitionName .. list[i]
            local item_label = tostring(list[i])
            item_label       = items[list[i]].label
            if items[list[i]].label_friendly then
                item_label = items[list[i]].label_friendly
            end
            val = list[i]
            tree:addItem(
                    item_label,
                    val,
                    offset,
                    false,
                    false
            )
        end
    end
    
    tree.items = {}
    updateRecursively(values, "", 1)
end


----------------

---------------------------------------------------------------------------------

-- Menu
--------------------------------------------------------------------------------

menu:addItem(config.shop_name .. " version " .. config.version, 0x0).onTouch = function()
    --GUI.alert("Hello world!")
end

menu:addItem("Logs").onTouch                                                 = function(workspace, object, e2, e3, e4, e5, e6, user)
    if user == config.owner then
        textBox_logs.hidden = not textBox_logs.hidden
        workspace:draw()
        return
    end
    --gui.on_alert = true
    GUI.notice(workspace, 5, "You are not authorized to see the logs!")
    -- gui.on_alert = false
end
gui.menu_exit                                                                = menu:addItem("Exit")

--------------------------------------------------------------------------------

return gui